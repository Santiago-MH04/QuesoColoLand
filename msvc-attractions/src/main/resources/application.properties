spring.application.name=msvc-attractions

#Setting the application to port zero enables Spring context to automatically assign a port to the app
#server.port=${PORT:0}
server.port=8080

#Database connection
spring.data.mongodb.uri=mongodb+srv://santimh04:FXsjq4tEG2aiyOLA@personalcluster.kgguhd0.mongodb.net/QuesoColoLand?retryWrites=true&w=majority
spring.data.mongodb.database=QuesoColoLand
#Optional configuration in order to show more detailed logs (for debugging)
logging.level.org.springframework.data.mongodb.core=DEBUG

#Spring Batch configurations
spring.batch.job.enabled=false
spring.batch.jdbc.initialize-schema=always
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.batch.JobRepositoryAutoConfiguration

#Spring multipart treatment
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

#Data serialisation - deserialisation
spring.jackson.serialization.write-dates-as-timestamps=false

#RabbitMQ configurations
    #Try and solve which parameter is correct
spring.rabbitmq.addresses=amqps://bcrxivsm:TG0W_penk1oFP5xvXExllGEYpRqzaYdV@shark.rmq.cloudamqp.com/bcrxivsm
spring.rabbitmq.ssl.enabled=true
#spring.rabbitmq.host=shark-01.rmq.cloudamqp.com
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=bcrxivsm
#spring.rabbitmq.password=TG0W_penk1oFP5xvXExllGEYpRqzaYdV

#Queue listened by the consumer
rabbitmq.queue.visitor-counts=visitor_counts_queue
#Exchange where the producer shall publish messages (Topic Exchange is usual for flexible routing)
rabbitmq.exchange.visitor-counts=visitor_counts_exchange
# Routing key the producer will use and the queue will listen (e.g. for every counting, use #)
rabbitmq.routingkey.visitor-counts=visitor_counts.#

#Netflix Eureka server connection
eureka.client.service-url.defaultZone=http://127.0.0.1:8761/eureka
